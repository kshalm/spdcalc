/*global module:false*/

module.exports = function(grunt) {
    "use strict";

    var spdcalcDevWebpack = require('./config/webpack-spdcalc.config');
    var webpack = require('webpack');
    var merge = require('lodash/merge');
    var semver = require('semver');
    var pkg = grunt.file.readJSON('package.json');
    var currentVersion = pkg.version;

    // Project configuration.
    grunt.initConfig({
        pkg: pkg,
        // checks the coding conventions
        lint : {
            files : ['gruntfile.js', 'test/*.js', 'src/*']
        },
        // clean up temporary/build files
        clean : {
            dist : ['dist/']
        },
        webpack: {
            options: {

            }
            , phasematch: require('./config/webpack-pm.config')
            , spdcalc: merge({}, spdcalcDevWebpack, {
                devtool: '#source-map'
                , cache: false
                , plugins: [
            		new webpack.optimize.DedupePlugin()
            		, new webpack.optimize.UglifyJsPlugin()
                ]
            })
        },
        'webpack-dev-server': {
            options: {
                webpack: spdcalcDevWebpack
                , stats: {
                    // Configure the console output
                    colors: true
                    , modules: true
                    , reasons: true
                }
            }
            , spdcalc: {
                watch: true
                , inline: true // auto refresh browser
                , keepalive: true // keep grunt process alive
                , contentBase: __dirname + '/dist' // where root of web server is
                , webpack: {
                    debug: true
                }
            }
        },
        // unit tests on the concatenated javascript
        jasmine : {
            tests : {
                src : 'dist/'
                , options : {
                    specs : 'test/spec/*.spec.js',
                    template : 'test/grunt.tmpl'
                }
            }
        },
        // check coding conventions on src files
        jshint : {
            options : require('./config/jshint.json')
            , phasematch : ['src/*.js']
            , spdcalc: {
                options: {
                    browser: true
                    , devel: true
                    , globals: {
                        define: true
                    }
                }
                , src: ['browser/library/js/{.,modules,mediators}/*.js']

            }
        }
        // serve built source
        , serve: {
            options: {
                port: 8080
                , serve: {
                    path: './dist/'
                }
            }
        }
        ,'gh-pages': {
            options: {
                base: 'dist'
                , tag: 'v<%= pkg.version %>'
                , message: 'autogenerated push by grunt-gh-pages'
            }
            , src: [ '**' ]
        }
        ,prompt: {
            bump: {
                options: {
                    questions: [
                        {
                            config:  'bump.options.versionType',
                            type:    'list',
                            message: 'Bump version from ' + '<%= pkg.version %>' + ' to:',
                            choices: [
                                // {
                                //     value: 'build',
                                //     name:  'Build:  '+ (currentVersion + '-?') + ' Unstable, betas, and release candidates.'
                                // },
                                {
                                    value: 'patch',
                                    name:  'Patch:  ' + semver.inc(currentVersion, 'patch') + ' Backwards-compatible bug fixes.'
                                },
                                {
                                    value: 'minor',
                                    name:  'Minor:  ' + semver.inc(currentVersion, 'minor') + ' Add functionality in a backwards-compatible manner.'
                                },
                                {
                                    value: 'major',
                                    name:  'Major:  ' + semver.inc(currentVersion, 'major') + ' Incompatible API changes.'
                                },
                                {
                                    value: 'custom',
                                    name:  'Custom: ?.?.? Specify version...'
                                }
                            ]
                        }
                        , {
                            config:   'bump.options.setVersion',
                            type:     'input',
                            message:  'What specific version would you like',
                            when:     function (answers) {
                                return answers['bump.options.versionType'] === 'custom';
                            },
                            validate: function (value) {
                                var valid = typeof semver.valid(value) == 'string';
                                return !!valid || 'Must be a valid semver, such as 1.2.3-rc1. See http://semver.org/ for more details.';
                            }
                        }
                        // , {
                        //     config:  'bump.options.files',
                        //     type:    'checkbox',
                        //     message: 'What should get the new version:',
                        //     choices: [
                        //         {
                        //             value:   'package',
                        //             name:    'package.json' + (!grunt.file.isFile('package.json') ? ' not found, will create one' : ''),
                        //             checked: grunt.file.isFile('package.json')
                        //         },
                        //         {
                        //             value:   'git',
                        //             name:    'git tag',
                        //             checked: grunt.file.isDir('.git')
                        //         }
                        //     ]
                        // }
                    ]
                }
            }
        }
        , bump: {
            options: {
                files: ['package.json'],
                dryRun: true,
                updateConfigs: [
                    'pkg'
                ],
                commit: false,
                commitMessage: 'Release v%VERSION%',
                commitFiles: ['package.json'],
                createTag: false,
                tagName: 'v%VERSION%',
                tagMessage: 'Version %VERSION%',
                push: false,
                pushTo: 'upstream',
                gitDescribeOptions: '--tags --always --abbrev=1 --dirty=-d',
                globalReplace: false,
                prereleaseName: false,
                metadata: '',
                regExp: false
            }
        }
    });

    // register grunt plugins
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-webpack');
    grunt.loadNpmTasks('grunt-serve');
    grunt.loadNpmTasks('grunt-gh-pages');
    grunt.loadNpmTasks('grunt-prompt');
    grunt.loadNpmTasks('grunt-bump');

    grunt.registerTask('dev', [ 'clean', 'webpack-dev-server:spdcalc' ]);
    grunt.registerTask('build-phasematch', [
        'jshint:phasematch'
        , 'webpack:phasematch'
    ]);
    grunt.registerTask('build-spdcalc', [
        'jshint:spdcalc',
        'webpack:spdcalc'
    ]);

    grunt.registerTask('deploy', [
        'prompt'
        ,'bump-only'
        // ,'gh-pages'
    ]);

    // Default task executes a build for phasematch library.
    grunt.registerTask('default', [ 'clean', 'build-phasematch', 'build-spdcalc', 'serve']);
};
