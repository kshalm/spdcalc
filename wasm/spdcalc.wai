type error = string

union auto-num {
  string,
  float64,
}
type maybe-auto-num = option<auto-num>

union auto-idler {
  string,
  idler-config,
}
type maybe-auto-idler = option<auto-idler>

record crystal-config {
  name: string,
  pm-type: string,
  phi-deg: float64,
  theta-deg: maybe-auto-num,
  length-um: float64,
  temperature-c: float64,
}

record pump-config {
  wavelength-nm: float64,
  waist-um: float64,
  bandwidth-nm: float64,
  average-power-mw: float64,
  spectrum-threshold: option<float64>,
}

record signal-config {
  wavelength-nm: float64,
  phi-deg: float64,
  // one of...
  theta-deg: option<float64>,
  theta-external-deg: option<float64>,
  //
  waist-um: float64,
  waist-position-um: maybe-auto-num,
}

record idler-config {
  wavelength-nm: float64,
  phi-deg: float64,
  // one of...
  theta-deg: option<float64>,
  theta-external-deg: option<float64>,
  //
  waist-um: float64,
  waist-position-um: maybe-auto-num,
}

record periodic-poling-config {
  poling-period-um: auto-num,
  apodization-fwhm-um: option<float64>,
}
union periodic-poling-or-off {
  string,
  periodic-poling-config
}

record spdc-config {
  crystal: crystal-config,
  pump: pump-config,
  signal: signal-config,
  idler: maybe-auto-idler,
  periodic-poling: option<periodic-poling-or-off>,
  deff-pm-per-volt: float64,
}

//resource spdc {
//  static from-config: func(config: spdc-config) -> expected<spdc, error>
//  static get-config: func() -> crystal-config
//  test: func() -> float64
//}

record wavelength-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

record frequency-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

record sum-diff-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

union si-range {
  wavelength-range,
  frequency-range,
  sum-diff-range,
}

type complex = tuple<float64, float64>

default-config: func() -> spdc-config
// ranges
wavelength-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
frequency-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
sum-diff-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
to-wavelength-range: func(any-range: si-range) -> si-range
to-frequency-range: func(any-range: si-range) -> si-range
to-sum-diff-range: func(any-range: si-range) -> si-range

// coincidences
jsa: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> complex
jsa-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> complex
jsi: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<complex>
jsa-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<complex>
jsi-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
// singles
jsa-singles: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-singles-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-singles: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-singles-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-singles-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsa-singles-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-idler-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-idler-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
