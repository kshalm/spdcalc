/// An error type for the spdc module.
record error {
  message: string,
}

/// The crystal configuration
record crystal-config {
  /// The crystal type
  kind: string,
  /// The phasematching type
  pm-type: string,
  phi-deg: float64,
  theta-deg: float64,
  length-um: float64,
  temperature-c: float64,
}

record pump-config {
  wavelength-nm: float64,
  waist-um: float64,
  bandwidth-nm: float64,
  average-power-mw: float64,
  spectrum-threshold: option<float64>,
}

record signal-config {
  wavelength-nm: float64,
  phi-deg: float64,
  // one of...
  theta-deg: option<float64>,
  theta-external-deg: option<float64>,
  //
  waist-um: float64,
  waist-position-um: float64,
}

record idler-config {
  wavelength-nm: float64,
  phi-deg: float64,
  // one of...
  theta-deg: option<float64>,
  theta-external-deg: option<float64>,
  //
  waist-um: float64,
  waist-position-um: float64,
}

record periodic-poling-config {
  poling-period-um: float64,
  apodization-fwhm-um: option<float64>,
}

record spdc-config {
  crystal: crystal-config,
  pump: pump-config,
  signal: signal-config,
  idler: idler-config,
  periodic-poling: option<periodic-poling-config>,
  deff-pm-per-volt: float64,
}

//resource spdc {
//  static from-config: func(config: spdc-config) -> expected<spdc, error>
//  static get-config: func() -> crystal-config
//  test: func() -> float64
//}

record wavelength-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

record frequency-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

record sum-diff-range {
  x: tuple<float64, float64, u64>,
  y: tuple<float64, float64, u64>,
}

union si-range {
  wavelength-range,
  frequency-range,
  sum-diff-range,
}

record efficiencies {
  signal: float64,
  idler: float64,
  symmetric: float64,
  coincidences: float64,
  signal-singles: float64,
  idler-singles: float64,
}

record hom-two-source-visibilities {
  ss: tuple<float64, float64>,
  ii: tuple<float64, float64>,
  si: tuple<float64, float64>,
}

record hom-two-source-rate-series {
  ss: list<float64>,
  ii: list<float64>,
  si: list<float64>,
}

type complex = tuple<float64, float64>

config-default: func() -> spdc-config
config-from-json: func(str: string) -> spdc-config
config-to-json: func(config: spdc-config) -> string
config-as-optimum: func(config: spdc-config) -> spdc-config
config-with-optimum-idler: func(config: spdc-config) -> spdc-config
config-with-optimum-crystal-theta: func(config: spdc-config) -> spdc-config
config-with-optimum-periodic-poling: func(config: spdc-config) -> spdc-config
config-with-swapped-signal-idler: func(config: spdc-config) -> spdc-config

// optimums
optimum-crystal-theta: func(config: spdc-config) -> float64
optimum-periodic-poling: func(config: spdc-config) -> periodic-poling-config

// ranges
optimum-range: func(config: spdc-config, steps: u64) -> si-range
wavelength-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
frequency-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
sum-diff-range: func(x-range: tuple<float64, float64, u64>, y-range: tuple<float64, float64, u64>) -> si-range
to-wavelength-range: func(any-range: si-range) -> si-range
to-frequency-range: func(any-range: si-range) -> si-range
to-sum-diff-range: func(any-range: si-range) -> si-range

// coincidences
jsa: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> complex
jsa-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> complex
jsi: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<complex>
jsa-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<complex>
jsi-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
// singles
jsa-singles: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-singles-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-singles: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsi-singles-normalized: func(config: spdc-config, ws: float64, wi: float64, integration-steps: option<u32>) -> float64
jsa-singles-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsa-singles-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
// idler singles
jsi-singles-idler-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
jsi-singles-idler-normalized-range: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> list<float64>
// schmidt number
schmidt-number: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> expected<float64, error>
// counts
counts-coincidences: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> float64
counts-singles-signal: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> float64
counts-singles-idler: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> float64
// efficiencies
efficiencies: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> efficiencies
// hom visibility
hom-visibility: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> tuple<float64, float64>
hom-rate-series: func(config: spdc-config, time-delays: list<float64>, range: si-range, integration-steps: option<u32>) -> list<float64>
hom-two-source-visibilities: func(config: spdc-config, range: si-range, integration-steps: option<u32>) -> hom-two-source-visibilities
hom-two-source-rate-series: func(config: spdc-config, time-delays: list<float64>, range: si-range, integration-steps: option<u32>) -> hom-two-source-rate-series