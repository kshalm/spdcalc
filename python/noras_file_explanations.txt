spdcalc/python/examples:
	2_source_HOM.py - implements JavaScript two-source HOM code in Python
	spdcalc_Bennink.py - calculates idler heralding efficiency vs waist for fixed pump waist using spdcalc library
	spdcalc_jsi_test.py - compares spdcalc JSI results to theoretical phasematching calculations by Boeuf et al

spdcalc/python/examples/spdcalc_graph_recreations:
	jsi_graph.py - generates a JSI using spdcalc
	periodic_poling_test.py - compares optimal periodic poling using the spdcalc library and calculations based on Boeuf et al
	refIndex_graph.py - plots refractive index versus crystal angle to find optimal angle for type 1 phasematching
	spdc_HOM_test.py - uses the spdcalc library to plot a single-source Hong-Ou-Mandel graph
	spdcalc_jsi_test.py - compares spdcalc JSI results to theoretical phasematching calculations by Boeuf et al

spdcalc/python/src:
	api_v2.py - an example api for the spdcalc library

spdcalc/python/docs/examples:
	api_v2_documentation - folder generated by Sphinx to create documentation for api_v2.py
	2_source_HOM.ipynb - describes the steps involved in the two-source HOM Python code
	heralding_efficiency_Bennink.ipynb - recreates graphs from Bennink's paper and compares some results to the spdcalc library
	heralding_efficiency_Bennink_new.ipynb - updates the above notebook so the spdcalc results are generated with the new api
	jsi_graph.ipynb - outlines steps involved in calculating the JSI based on Boeuf et al's paper
	refIndex_graph.ipynb - outlines steps involved in calculating a type 1 phasematching angle
	schmidt_number.ipynb - outlines how to calculate Schmidt numbers using the spdcalc library and numpy
	schmidt_number_new.ipynb - updates the above notebook to use the new api
